{"version":3,"sources":["components/Header.js","components/InputLocation.js","components/MapboxGLMap.js","App.js","serviceWorker.js","index.js"],"names":["styles","height","width","padding","textAlign","fontSize","Header","style","InputLocation","Input","placeholder","borderRadius","inputStyles","display","justifyContent","marginBottom","MapboxGLMap","backgrounds","normal","light","dark","satellite","useState","map","setMap","mapContainer","useRef","currentBackground","setCurrentBackground","useEffect","mapboxgl","accessToken","process","Map","container","current","center","zoom","on","resize","initializeMap","ButtonGroup","size","Object","keys","b","index","Button","key","onClick","setStyle","handleBackgroundChange","ref","el","overflow","flexDirection","alignItems","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4NAEMA,G,MAAS,CACXC,OAAQ,OACRC,MAAO,QACPC,QAAS,OACTC,UAAW,SACXC,SAAU,SAWCC,EARA,WACX,OACI,yBAAKC,MAAOP,GACR,2C,uDCFGQ,EARO,WACpB,OACE,6BACE,kBAACC,EAAA,EAAD,CAAOC,YAAY,mCCAnBV,EAAS,CACbE,MAAO,OACPD,OAAQ,OACRU,aAAc,QAGVC,EAAc,CAClBC,QAAS,OACTC,eAAgB,eAChBC,aAAc,QAiEDC,EA9DK,WAClB,IAAMC,EAAc,CAClBC,OAAQ,cACRC,MAAO,YACPC,KAAM,WACNC,UAAW,gBALW,EAQFC,mBAAS,MARP,mBAQjBC,EARiB,KAQZC,EARY,KASlBC,EAAeC,iBAAO,MATJ,EAU0BJ,mBAChDL,EAAYC,QAXU,mBAUjBS,EAViB,KAUEC,EAVF,KA0CxB,OAvBAC,qBACE,WACEC,IAASC,YAAcC,yFAelBT,GAdiB,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,aACzBF,EAAM,IAAIO,IAASG,IAAI,CAC3BC,UAAWT,EAAaU,QACxB5B,MAAM,0BAAD,OAA4BoB,GACjCS,OAAQ,CAAC,UAAW,WACpBC,KAAM,KAGRd,EAAIe,GAAG,QAAQ,WACbd,EAAOD,GACPA,EAAIgB,YAIEC,CAAc,CAAEhB,SAAQC,mBAGpC,CAACF,IAID,6BACE,yBAAKhB,MAAOK,GACV,kBAAC6B,EAAA,EAAD,CAAaC,KAAK,MACfC,OAAOC,KAAK3B,GAAaM,KAAI,SAACsB,EAAGC,GAAJ,OAC5B,kBAACC,EAAA,EAAD,CACEC,IAAKF,EACLG,QAAS,kBAnCU,SAACJ,GAC9BjB,EAAqBX,EAAY4B,IACjCtB,EAAI2B,SAAJ,iCAAuCL,IAiCdM,CAAuBlC,EAAY4B,MAEjDA,OAIP,kBAAC,EAAD,OAEF,yBAAKO,IAAK,SAACC,GAAD,OAAS5B,EAAaU,QAAUkB,GAAK9C,MAAOP,MCvEtDA,EAAS,CACbsD,SAAU,SACVzC,QAAS,OACT0C,cAAe,SACfzC,eAAgB,SAChB0C,WAAY,UAYCC,MATf,WACE,OACE,yBAAKlD,MAAOP,GACV,kBAAC,EAAD,MACA,kBAAC,EAAD,QCJc0D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.50fa6fe4.chunk.js","sourcesContent":["import React from 'react'\n\nconst styles = {\n    height: '60px',\n    width: '100vw',\n    padding: '10px',\n    textAlign: 'center',\n    fontSize: '30px',\n  };\n\nconst Header = () => {\n    return (\n        <div style={styles}>\n            <header>KART?</header>\n        </div>\n    )\n}\n\nexport default Header\n","import React from \"react\";\nimport { Input } from \"reactstrap\";\n\nconst InputLocation = () => {\n  return (\n    <div>\n      <Input placeholder=\"Where do you want to travel?\" />\n    </div>\n  );\n};\n\nexport default InputLocation;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport { Button, ButtonGroup } from \"reactstrap\";\nimport InputLocation from \"./InputLocation\";\n\nconst styles = {\n  width: \"98vw\",\n  height: \"85vh\",\n  borderRadius: \"10px\",\n};\n\nconst inputStyles = {\n  display: \"flex\",\n  justifyContent: \"space-around\",\n  marginBottom: \"20px\",\n};\n\nconst MapboxGLMap = () => {\n  const backgrounds = {\n    normal: \"streets-v11\",\n    light: \"light-v10\",\n    dark: \"dark-v10\",\n    satellite: \"satellite-v9\",\n  };\n\n  const [map, setMap] = useState(null);\n  const mapContainer = useRef(null);\n  const [currentBackground, setCurrentBackground] = useState(\n    backgrounds.normal\n  );\n\n  const handleBackgroundChange = (b) => {\n    setCurrentBackground(backgrounds[b]);\n    map.setStyle(`mapbox://styles/mapbox/${b}`);\n  };\n\n  useEffect(\n    () => {\n      mapboxgl.accessToken = process.env.REACT_APP_MAPBOX_KEY;\n      const initializeMap = ({ setMap, mapContainer }) => {\n        const map = new mapboxgl.Map({\n          container: mapContainer.current,\n          style: `mapbox://styles/mapbox/${currentBackground}`, // stylesheet location\n          center: [10.408773, 63.422091],\n          zoom: 10,\n        });\n\n        map.on(\"load\", () => {\n          setMap(map);\n          map.resize();\n        });\n      };\n\n      if (!map) initializeMap({ setMap, mapContainer });\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [map]\n  );\n\n  return (\n    <div>\n      <div style={inputStyles}>\n        <ButtonGroup size=\"lg\">\n          {Object.keys(backgrounds).map((b, index) => (\n            <Button\n              key={index}\n              onClick={() => handleBackgroundChange(backgrounds[b])}\n            >\n              {b}\n            </Button>\n          ))}\n        </ButtonGroup>\n        <InputLocation />\n      </div>\n      <div ref={(el) => (mapContainer.current = el)} style={styles} />\n    </div>\n  );\n};\n\nexport default MapboxGLMap;\n","import React from \"react\";\nimport Header from \"./components/Header\";\nimport MapboxGLMap from \"./components/MapboxGLMap\";\n\nconst styles = {\n  overflow: \"hidden\",\n  display: \"flex\",\n  flexDirection: \"column\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n};\n\nfunction App() {\n  return (\n    <div style={styles}>\n      <Header />\n      <MapboxGLMap />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}